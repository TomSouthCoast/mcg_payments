# .github/workflows/sumup-testing.yml
name: SumUp Integration Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Phase 1: Unit Tests (No External Dependencies)
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run unit tests
      run: npm run test:unit
    
    - name: Generate coverage report
      run: npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info

  # Phase 2: API Integration Tests
  api-integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run API integration tests
      env:
        SUMUP_TEST_API_KEY: ${{ secrets.SUMUP_TEST_API_KEY }}
        SUMUP_TEST_MERCHANT_CODE: ${{ secrets.SUMUP_TEST_MERCHANT_CODE }}
      run: npm run test:api
    
    - name: Test API rate limiting
      env:
        SUMUP_TEST_API_KEY: ${{ secrets.SUMUP_TEST_API_KEY }}
      run: npm run test:api:rate-limit

  # Phase 3: End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests, api-integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Start test server
      run: |
        npm run build
        npm start &
        sleep 10
      env:
        NODE_ENV: testing
        SUMUP_TEST_API_KEY: ${{ secrets.SUMUP_TEST_API_KEY }}
    
    - name: Run E2E tests
      run: npm run test:e2e
    
    - name: Upload E2E test artifacts
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: e2e-screenshots
        path: test-results/

  # Performance Testing
  performance-tests:
    runs-on: ubuntu-latest
    needs: api-integration-tests
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run performance tests
      env:
        SUMUP_TEST_API_KEY: ${{ secrets.SUMUP_TEST_API_KEY }}
      run: npm run test:performance
    
    - name: Comment performance results
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const results = fs.readFileSync('test-results/performance.json', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Performance Test Results\n\`\`\`json\n${results}\n\`\`\``
          });

  # Security Testing
  security-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run security audit
      run: npm audit --audit-level=high
    
    - name: Check for secrets in code
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

  # Pre-Production Testing (only on main branch)
  pre-production-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests, api-integration-tests, e2e-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run pre-production smoke tests
      env:
        SUMUP_STAGING_API_KEY: ${{ secrets.SUMUP_STAGING_API_KEY }}
      run: npm run test:smoke
    
    - name: Load testing
      env:
        SUMUP_STAGING_API_KEY: ${{ secrets.SUMUP_STAGING_API_KEY }}
      run: npm run test:load
    
    - name: Create deployment-ready artifact
      run: |
        npm run build
        tar -czf deployment.tar.gz dist/
    
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment.tar.gz

---

# package.json - Add these test scripts
{
  "scripts": {
    "test": "jest",
    "test:unit": "jest --testPathPattern='unit|__tests__' --testPathIgnorePatterns='integration|e2e'",
    "test:api": "jest --testPathPattern='api|integration'",
    "test:api:rate-limit": "jest --testPathPattern='rate-limit'",
    "test:e2e": "jest --testPathPattern='e2e' --runInBand",
    "test:performance": "jest --testPathPattern='performance' --runInBand",
    "test:smoke": "jest --testPathPattern='smoke'",
    "test:load": "jest --testPathPattern='load'",
    "test:coverage": "jest --coverage",
    "test:watch": "jest --watch",
    "test:ci": "jest --ci --coverage --watchAll=false"
  }
}

---

# .github/workflows/deploy-production.yml
name: Deploy to Production

on:
  workflow_run:
    workflows: ["SumUp Integration Testing"]
    branches: [main]
    types: [completed]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download deployment artifact
      uses: actions/download-artifact@v3
      with:
        name: deployment-package
        path: ./
    
    - name: Final production checks
      env:
        SUMUP_PROD_API_KEY: ${{ secrets.SUMUP_PROD_API_KEY }}
      run: |
        # Verify production credentials work
        npm run verify:production
        
        # Run final smoke test against production API
        npm run test:production:smoke
    
    - name: Deploy to production
      run: |
        # Your deployment script here
        echo "Deploying to production..."
        # Example: deploy to your hosting platform
    
    - name: Post-deployment verification
      run: |
        # Verify deployment worked
        npm run test:production:health
    
    - name: Notify team
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

---

# Repository Structure for GitHub
your-repo/
├── .github/
│   └── workflows/
│       ├── sumup-testing.yml
│       └── deploy-production.yml
├── src/
│   ├── payment-service.js
│   ├── __tests__/
│   │   ├── unit/
│   │   │   ├── payment.test.js
│   │   │   └── validation.test.js
│   │   ├── integration/
│   │   │   ├── api.test.js
│   │   │   └── rate-limit.test.js
│   │   ├── e2e/
│   │   │   └── payment-flow.test.js
│   │   ├── performance/
│   │   │   └── load.test.js
│   │   └── smoke/
│   │       └── production.test.js
│   └── utils/
├── test-utils/
│   ├── mock-sumup.js
│   ├── test-data.js
│   └── setup.js
├── package.json
├── jest.config.js
└── README.md

---

# GitHub Secrets Setup (Repository Settings > Secrets)
# You'll need to add these secrets:

SUMUP_TEST_API_KEY=your_test_api_key_here
SUMUP_TEST_MERCHANT_CODE=your_test_merchant_code
SUMUP_STAGING_API_KEY=your_staging_api_key
SUMUP_PROD_API_KEY=your_production_api_key
SLACK_WEBHOOK=your_slack_webhook_url

---

# GitHub Codespaces Configuration (.devcontainer/devcontainer.json)
{
  "name": "SumUp Integration Development",
  "image": "mcr.microsoft.com/devcontainers/javascript-node:20",
  "features": {
    "ghcr.io/devcontainers/features/github-cli:1": {}
  },
  "postCreateCommand": "npm install",
  "customizations": {
    "vscode": {
      "extensions": [
        "ms-vscode.vscode-jest",
        "esbenp.prettier-vscode",
        "ms-vscode.vscode-json"
      ]
    }
  },
  "forwardPorts": [3000, 8080],
  "portsAttributes": {
    "3000": {
      "label": "Application",
      "onAutoForward": "notify"
    }
  }
}
